import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import * as moment from "moment";

 @Injectable({
  providedIn: 'root'
 })
 export class UserService {

 // http options used for making API calls
 private httpOptions: any;
 public name: string;
 // the token expiration date
  public expires_in: Date;

  // the username of the logged in user
  public scope: string;

  // token from google/fb after authenticating against them.
  public refresh_token: string;

  // authorization token generated by DRF.
  public token_type: string;
  public access_token: any;


  // error messages received from the login attempt
  public errors: any = [];
  constructor(private http: HttpClient) {
    this.httpOptions = {
          headers: new HttpHeaders( {
            'Content-Type': 'application/json',
          }
        )
    };
  }

  // Send google/fb token to django and get back a django token,
  // that can then be sent in each request.
  public login(userDataJson) {
     this.http.post("http://127.0.0.1:8000/userauth", userDataJson, this.httpOptions).subscribe(
       authResult  => {
         this.updateData(authResult);
       },
       err => {
         this.errors = err['error'];
       }
     );
  }

  public setLocalStorageUserdata(userData, socialPlatform) {
    if (socialPlatform  == "google") {
      localStorage.setItem("username", userData.name);
    }
  }

  public setLocalStorageSessionData(authResult) {
    localStorage.setItem('access_token', authResult.access_token);
    localStorage.setItem('refresh_token', authResult.refresh_token);

    const expiresAt = moment().add(authResult.expires_in,'second');
    localStorage.setItem("expires_at", JSON.stringify(expiresAt.valueOf()));
  }

  public isLoggedIn() {
    if (localStorage.getItem("access_token") === null) {
       return false;
    } else {
       return true;
    }
  }

  public getUsername() {
    if (this.isLoggedIn()) {
      const username = localStorage.getItem("username");
      if ( username === null) {
        return "anonymous";
      } else {
        return username;
      }
    } else {
       return "anonymous";
    }
}

  //
  public refreshToken() {

  }

  private updateData(authResult) {
    this.errors = [];
    // decode the token to read various details.
    const token_decoded = JSON.parse(JSON.stringify(authResult));
    this.access_token = token_decoded.access_token;
    this.token_type = token_decoded.token_type;
    this.scope = token_decoded.scope;
    this.refresh_token = token_decoded.refresh_token;
    this.expires_in = new Date(new Date() + token_decoded.expires_in);


    this.setLocalStorageSessionData(authResult)
  }

}
